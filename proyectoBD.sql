-- MySQL Script generated by MySQL Workbench
-- Sun Jul 30 21:32:58 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ITSO_mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ITSO_mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ITSO_mydb` DEFAULT CHARACTER SET utf8 ;
USE `ITSO_mydb` ;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Inspector`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Inspector` (
  `id_Inspector` INT AUTO_INCREMENT NOT NULL,
  `Nombre` VARCHAR(20) NULL,
  `Email` VARCHAR(50) NULL,
  `Celular` VARCHAR(10) NULL,
  PRIMARY KEY (`id_Inspector`)
) 
ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Cliente` (
  `id_Cliente` INT AUTO_INCREMENT NOT NULL,
  `Nombre` VARCHAR(20) NULL,
  `Apellido` VARCHAR(20) NULL,
  `Fecha_Nacimiento` DATE NULL,
  `Email` VARCHAR(50) NULL,
  `Celular` VARCHAR(10) NULL,
  `Edad` INT NULL,
  `Licencia` TINYINT NULL,
  `id_Inspector` INT NULL,
  PRIMARY KEY (`id_Cliente`),
  FOREIGN KEY (`id_inspector`) REFERENCES `ITSO_mydb`.`Inspector` (`id_Inspector`) ON DELETE SET NULL
  )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Pago` (
  `Id_Pago` INT AUTO_INCREMENT NOT NULL,
  `Id_Cliente` INT NULL,
  `Monto` FLOAT NULL,
  `Fecha` DATE NULL,
  `conf_pago` TINYINT NULL,
  `Plazo` DATE NULL,
  `Forma_pago` VARCHAR(20) NULL,
  PRIMARY KEY (`Id_Pago`),
  FOREIGN KEY (`Id_Cliente`) REFERENCES `ITSO_mydb`.`Cliente` (`id_Cliente`) ON DELETE SET NULL
) 
ENGINE = InnoDB;





-- -----------------------------------------------------
-- Table `ITSO_mydb`.`EmpresaAlquiler`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`EmpresaAlquiler` (
  `RUC` VARCHAR(10) NOT NULL,
  `Nombre` VARCHAR(50) NULL,
  PRIMARY KEY (`RUC`)
) 
ENGINE = InnoDB;



-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Vehiculo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Vehiculo` (
  `No_Matricula` VARCHAR(7) NOT NULL,
  `RUC` VARCHAR(10) NULL,
  `Marca` VARCHAR(20) NULL,
  `Disponibilidad` TINYINT NULL,
  `Precio_alquiler` FLOAT NULL,
  `Capacidad` INT NULL,
  PRIMARY KEY (`No_Matricula`)
) 
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Reserva`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Reserva` (
  `id_Reserva` INT AUTO_INCREMENT NOT NULL,
  `Id_Cliente` INT NULL,
  `Id_Inspector` INT NULL,
  `No_Matricula` VARCHAR(7) NULL,
  `Fecha_Inicio` DATE NULL,
  `Hora_reserva` TIME NULL,
  `ubicacion_recogida` VARCHAR(50) NULL,
  PRIMARY KEY (`id_Reserva`),
  FOREIGN KEY (`Id_Cliente`) REFERENCES `ITSO_mydb`.`Cliente` (`id_Cliente`) ON DELETE SET NULL,
  FOREIGN KEY (`Id_Inspector`) REFERENCES `ITSO_mydb`.`Inspector` (`id_Inspector`) ON DELETE SET NULL,
  FOREIGN KEY (`No_Matricula`) REFERENCES `ITSO_mydb`.`Vehiculo` (`No_Matricula`) ON DELETE SET NULL
) 
ENGINE = InnoDB;



-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Recargo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Recargo` (
  `id_Recargo` INT AUTO_INCREMENT NOT NULL,
  `Id_pago` INT NULL,
  `Fecha` DATE NULL,
  `Cobertura_Seguro` VARCHAR(20) NULL,
  `Monto` FLOAT NULL,
  `Razon` VARCHAR(100) NULL,
  PRIMARY KEY (`id_Recargo`),
  FOREIGN KEY (`id_Pago`) REFERENCES `ITSO_mydb`.`Pago` (`Id_Pago`) ON DELETE CASCADE,
  UNIQUE(`Id_Pago`)
) 
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Devolucion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Devolucion` (
  `id_Devolucion` INT AUTO_INCREMENT NOT NULL,
  `No_Matricula` VARCHAR(7) NULL,
  `Estado_devolucion` TINYINT NULL,
  `Hora_devolucion` TIME NULL,
  `Hora_devolucion_real` TIME NULL,
  `Fecha_devolucion` DATE NULL,
  `Fecha_devolucion_real` DATE NULL,
  `Lugar_devolucion` VARCHAR(100) NULL,
  PRIMARY KEY (`id_Devolucion`)
) 
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Realizar`
-- Cliente_Devolucion
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Realizar` (
  `id_Cliente` INT NOT NULL,
  `id_Devolucion` INT NOT NULL,
  PRIMARY KEY (`id_Cliente`, `id_Devolucion`),
  FOREIGN KEY (`id_Devolucion`) REFERENCES `ITSO_mydb`.`Devolucion` (`id_Devolucion`)
) 
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Realizado`
-- Pago_Vehiculo
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Realizado` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `No_Matricula` VARCHAR(7) NOT NULL,
  `Id_Pago` INT NULL,
  `finished_payment` BOOL DEFAULT FALSE,
  PRIMARY KEY (`ID`,`No_Matricula`),
  FOREIGN KEY (`No_Matricula`) REFERENCES `ITSO_mydb`.`Vehiculo` (`No_Matricula`) ON DELETE CASCADE,
  FOREIGN KEY (`id_Pago`) REFERENCES `ITSO_mydb`.`Pago` (`Id_Pago`) ON DELETE SET NULL
) 
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Alquilar`
-- Inspector_EmpresaAlquiler
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Alquilar` (
  `RUC` VARCHAR(10) NOT NULL,
  `id_Inspector` INT NOT NULL,
  PRIMARY KEY (`RUC`,`id_Inspector`),
  FOREIGN KEY (`RUC`) REFERENCES `ITSO_mydb`.`EmpresaAlquiler` (`RUC`),
  FOREIGN KEY (`id_Inspector`) REFERENCES `ITSO_mydb`.`Inspector` (`id_Inspector`)
) 
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ITSO_mydb`.`Tiene`
-- Devolucion_Vehiculo
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ITSO_mydb`.`Tiene` (
  `id_Devolucion` INT NOT NULL,
  `No_Matricula` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id_Devolucion`,`No_Matricula`),
  FOREIGN KEY (`id_Devolucion`) REFERENCES `ITSO_mydb`.`Devolucion` (`id_Devolucion`),
  FOREIGN KEY (`No_Matricula`) REFERENCES `ITSO_mydb`.`Vehiculo` (`No_Matricula`)
) 
ENGINE = InnoDB;

-- -------------------------------------------------
-- Triggers
-- Establece automáticamente la fecha del Recargo
DELIMITER //
CREATE TRIGGER setRecargoDate
BEFORE INSERT ON Recargo
FOR EACH ROW
BEGIN
	SET NEW.Fecha = NOW();
END;
//
DELIMITER ;

-- Establece automáticamente la fecha del Pago
DELIMITER //
CREATE TRIGGER setPagoDate
BEFORE INSERT ON Pago
FOR EACH ROW
BEGIN
	SET NEW.Fecha = NOW();
END;
//
DELIMITER ;
-- Agrega tabla vihiculo
alter table vehiculo add imageURLVe varchar(300) default null;

-- Agrega tabla empresaAlquiler
alter table empresaalquiler add imageURLLogo varchar(300) default null;

-- Agrega tabla cliente
alter table cliente add imageURLFoto varchar(300) default null;

-- Agrega tabla inspector
alter table inspector add imageURLFotoin varchar(300) default null ;

-- Registros Inspectores
INSERT INTO Inspector (Nombre, Email, Celular) VALUES
('Javier', 'javier.inspector@gmail.com', '0998765432'),
('Carolina', 'carolina.inspector@hotmail.com', '0987654321'),
('Andres', 'andres.inspector@yahoo.com', '0998765432'),
('Patricia', 'patricia.inspector@outlook.com', '0987654321'),
('Fernando', 'fernando.inspector@gmail.com', '0998765432'),
('Diana', 'diana.inspector@hotmail.com', '0987654321'),
('Oscar', 'oscar.inspector@yahoo.com', '0998765432'),
('Camila', 'camila.inspector@gmail.com', '0987654321'),
('Carlos', 'carlos.inspector@outlook.com', '0998765432'),
('Sara', 'sara.inspector@yahoo.com', '0987654321');
-- ---------------
-- Registros Clientes
INSERT INTO Cliente (Nombre, Apellido, Fecha_Nacimiento, Email, Celular, Edad, Licencia,Id_Inspector) VALUES
('Juan', 'Perez', '1985-05-15', 'juan.perez@gmail.com', '0991234567', 36, 1,2),
('Maria', 'Gonzalez', '1990-09-22', 'maria.gonzalez@hotmail.com', '0987654321', 31, 1,4),
('Pedro', 'Ramirez', '1988-11-10', 'pedro.ramirez@yahoo.com', '0998765432', 33, 1,3),
('Ana', 'Lopez', '1995-03-03', 'ana.lopez@outlook.com', '0987654321', 26, 1,1),
('Carlos', 'Martinez', '1982-07-07', 'carlos.martinez@gmail.com', '0998765432', 39, 1,1),
('Laura', 'Sanchez', '1992-12-18', 'laura.sanchez@hotmail.com', '0987654321', 29, 1,6),
('Luis', 'Hernandez', '1987-02-25', 'luis.hernandez@yahoo.com', '0998765432', 34, 1,2),
('Paula', 'Torres', '1998-06-14', 'paula.torres@gmail.com', '0987654321', 23, 1,7),
('Roberto', 'Gomez', '1980-09-30', 'roberto.gomez@outlook.com', '0998765432', 41, 1,7),
('Sofia', 'Diaz', '1993-04-28', 'sofia.diaz@yahoo.com', '0987654321', 28, 1,7);

-- Registros Pagos
INSERT INTO Pago (Id_Cliente, Monto, Fecha, conf_pago, Plazo, Forma_pago) VALUES
(4, 100.00, '2023-07-01', 1, '2023-08-01', 'Tarjeta'),
(7, 150.50, '2023-07-15', 1, '2023-08-15', 'Efectivo'),
(6, 200.00, '2023-07-02', 1, '2023-08-02', 'Tarjeta'),
(4, 120.75, '2023-07-20', 1, '2023-08-20', 'Transferencia'),
(3, 80.25, '2023-07-03', 1, '2023-08-03', 'Tarjeta'),
(5, 300.00, '2023-07-25', 1, '2023-08-25', 'Efectivo'),
(2, 180.50, '2023-07-04', 1, '2023-08-04', 'Efectivo'),
(1, 90.00, '2023-07-10', 1, '2023-08-10', 'Tarjeta'),
(1, 220.75, '2023-07-05', 1, '2023-08-05', 'Transferencia'),
(1, 150.25, '2023-07-12', 1, '2023-08-12', 'Tarjeta');


-- Registros Empresa Alquiler
INSERT INTO EmpresaAlquiler (RUC, Nombre) VALUES
('3000000001', 'Alquiler de Autos Ecuador'),
('4000000002', 'Autos Rentables Cía. Ltda.'),
('5000000003', 'Carros Express S.A.'),
('6000000004', 'Rentacar Andino C.A.'),
('7000000005', 'CarrosVeloz Rentacar'),
('8000000006', 'RentautoEC Alquiler de Autos'),
('9000000007', 'Ecuarent Car Rental'),
('1000000008', 'Alquilautos S.A.'),
('2000000009', 'Velocar Rentacar'),
('3500000010', 'RentacarPremium Cía. Ltda.');
-- Registros Vehiculos
INSERT INTO Vehiculo (No_Matricula, RUC, Marca, Disponibilidad, Precio_alquiler, Capacidad) VALUES
('ABC123', '3000000001', 'Toyota', 1, 50.00, 4),
('XYZ789', '4000000002', 'Nissan', 1, 45.00, 5),
('DEF456', '5000000003', 'Chevrolet', 1, 60.00, 7),
('GHI987', '6000000004', 'Ford', 1, 55.00, 4),
('JKL234', '7000000005', 'Honda', 1, 48.00, 5),
('MNO345', '8000000006', 'Hyundai', 1, 52.00, 6),
('PQR567', '9000000007', 'Volkswagen', 1, 50.00, 4),
('STU890', '1000000008', 'Kia', 1, 47.00, 5),
('VWX901', '2000000009', 'Mazda', 1, 55.00, 6),
('YZA012', '3500000010', 'Suzuki', 1, 49.00, 5);


-- Registros Reservas
INSERT INTO Reserva (Id_Cliente, Id_Inspector, No_Matricula, Fecha_Inicio, Hora_reserva, ubicacion_recogida) VALUES
(4, 4, 'ABC123', '2023-08-01', '08:00:00', 'Quito, Aeropuerto Internacional Mariscal Sucre'),
(3, 4, 'XYZ789','2023-08-15', '09:30:00', 'Guayaquil, Centro Ciudad'),
(1, 4, 'YZA012','2023-08-02', '10:45:00', 'Cuenca, Terminal de Autobuses'),
(5, 4, 'JKL234','2023-08-20', '12:30:00', 'Riobamba, Terminal de Autobuses'),
(7, 4, 'MNO345','2023-08-03', '14:00:00', 'Manta, Aeropuerto Internacional Eloy Alfaro'),
( 1, 4, 'XYZ789','2023-08-25', '16:30:00', 'Guayaquil, Hotel Sheraton'),
(8, 4, 'DEF456','2023-08-04', '08:15:00', 'Quito, Aeropuerto Internacional Mariscal Sucre'),
(2, 4, 'DEF456','2023-08-10', '11:30:00', 'Guayaquil, Centro Ciudad'),
(5, 4, 'VWX901','2023-08-05', '13:00:00', 'Cuenca, Terminal de Autobuses'),
(1, 4, 'XYZ789','2023-08-12', '17:45:00', 'Riobamba, Hotel Montecarlo');


-- Registros Recargo
INSERT INTO Recargo (Id_pago, Fecha, Cobertura_Seguro, Monto, Razon) VALUES
(1, '2023-07-01', 'Seguro básico', 10.00, 'Cobertura adicional'),
(3,  '2023-07-15', 'Seguro completo', 15.50, 'Daño en el vehículo'),
(2, '2023-07-02', 'Seguro básico', 20.00, 'Demora en la entrega'),
(4, '2023-07-20', 'Seguro completo', 12.75, 'Daño en el parabrisas'),
(5, '2023-07-03', 'Seguro básico', 8.25, 'Demora en la devolución'),
(6, '2023-07-25', 'Seguro completo', 30.00, 'Choque delantero'),
(7, '2023-07-04', 'Seguro básico', 18.50, 'Choque trasero'),
(8, '2023-07-10', 'Seguro completo', 9.00, 'Rayón en la puerta derecha'),
(9, '2023-07-05', 'Seguro básico', 22.75, 'Demora en la entrega'),
(10, '2023-07-12', 'Seguro completo', 15.25, 'Daño en el retrovisor');


-- Registros Devoluciones
INSERT INTO Devolucion (No_Matricula, Estado_devolucion, Hora_devolucion, Hora_devolucion_real, Fecha_devolucion, Fecha_devolucion_real, Lugar_devolucion) VALUES
('ABC123', 1, '17:00:00', '17:30:00', '2023-08-01', '2023-08-01', 'Quito, Aeropuerto Internacional Mariscal Sucre'),
('XYZ789', 1, '18:30:00', '19:00:00', '2023-08-15', '2023-08-15', 'Guayaquil, Centro Ciudad'),
('DEF456', 1, '15:45:00', '16:00:00', '2023-08-02', '2023-08-02', 'Cuenca, Terminal de Autobuses'),
('GHI987', 1, '16:30:00', '17:00:00', '2023-08-20', '2023-08-20', 'Riobamba, Terminal de Autobuses'),
('JKL234', 1, '14:30:00', '15:00:00', '2023-08-03', '2023-08-03', 'Manta, Aeropuerto Internacional Eloy Alfaro'),
('MNO345', 1, '16:00:00', '16:30:00', '2023-08-25', '2023-08-25', 'Guayaquil, Hotel Sheraton'),
('PQR567', 1, '10:00:00', '10:30:00', '2023-08-04', '2023-08-04', 'Quito, Aeropuerto Internacional Mariscal Sucre'),
('STU890', 1, '12:45:00', '13:15:00', '2023-08-10', '2023-08-10', 'Guayaquil, Centro Ciudad'),
('VWX901', 1, '19:30:00', '20:00:00', '2023-08-05', '2023-08-05', 'Cuenca, Terminal de Autobuses'),
('YZA012', 1, '17:15:00', '17:45:00', '2023-08-12', '2023-08-12', 'Riobamba, Hotel Montecarlo');


-- SP
-- INSPECTOR
DELIMITER //
CREATE PROCEDURE insertInspector(IN nombre VARCHAR(20), IN email VARCHAR(50), IN celular VARCHAR(10))
BEGIN
    START TRANSACTION;
    IF nombre = '' OR email = '' OR celular = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
    END IF;
    
    INSERT INTO Inspector(nombre, email, celular) VALUES (nombre, email, celular);
    
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateInspector(IN id INT, IN nombre VARCHAR(20), IN email VARCHAR(50), IN celular VARCHAR(10))
BEGIN
	START TRANSACTION;
    IF nombre = '' OR email = '' OR celular = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    
    UPDATE Inspector
    SET nombre = nombre, email = email, celular = celular
    WHERE id_Inspector = id;
    
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteInspector(IN id INT)
BEGIN
	START TRANSACTION;
    IF id IS NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El ID del Inspector no puede ser NULL';
    END IF;
    DELETE FROM Inspector
    WHERE id_Inspector = id;
END;
//
DELIMITER ;

-- Clientes
DELIMITER //
CREATE PROCEDURE insertCliente(IN nombre VARCHAR(20), IN apellido VARCHAR(20), IN fecha_nacimiento DATE, IN email VARCHAR(50), IN celular VARCHAR(10), IN edad INT, IN licencia TINYINT, IN id_Inspector INT)
BEGIN
	START TRANSACTION;
    IF nombre = '' OR apellido = '' OR email = '' OR celular = '' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
    END IF;
    INSERT INTO Cliente(nombre, apellido, fecha_nacimiento, email, celular, edad, licencia, id_Inspector)
    VALUES (nombre, apellido, fecha_nacimiento, email, celular, edad, licencia, id_Inspector);
    
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateCliente(IN nombre VARCHAR(20), IN apellido VARCHAR(20), IN fecha_nacimiento DATE, IN email VARCHAR(50), IN celular VARCHAR(10), IN edad INT, IN licencia TINYINT, IN id_Inspector INT)
BEGIN
	START TRANSACTION;
    IF nombre = '' OR apellido = '' OR email = '' OR celular = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    
    UPDATE Cliente
    SET nombre = nombre, apellido = apellido, fecha_nacimiento = fecha_nacimiento, email = email, celular = celular, edad = edad, licencia = licencia, id_Inspector = id_Inspector
    WHERE id_Cliente = id;
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteCliente(IN id INT)
BEGIN
	START TRANSACTION;
    IF id IS NULL THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El ID del Cliente no puede ser NULL';
	END IF;
    DELETE FROM Cliente 
    WHERE id_Cliente = id;
END;
//
DELIMITER //

-- Pago
DELIMITER //
CREATE PROCEDURE insertPago(IN id_Cliente INT, IN monto FLOAT, IN conf_pago TINYINT, IN plazo DATE, IN forma_pago VARCHAR(20))
BEGIN
	START TRANSACTION;
    IF id_Cliente IS NULL OR monto IS NULL OR conf_pago IS NULL OR plazo IS NULL OR forma_pago = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    INSERT INTO Pago(id_Cliente, monto, conf_pago, plazo, forma_pago)
    VALUES (id_Cliente, monto, conf_pago, plazo, forma_pago);
    
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updatePago(IN id_Pago INT, IN id_Cliente INT, IN monto FLOAT, IN conf_pago TINYINT, IN plazo DATE, IN forma_pago VARCHAR(20))
BEGIN
    START TRANSACTION;

    IF id_Cliente IS NULL OR monto IS NULL OR conf_pago IS NULL OR plazo IS NULL OR forma_pago = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
    END IF;

    UPDATE Pago
    SET id_Cliente = id_Cliente, monto = monto, conf_pago = conf_pago, plazo = plazo, forma_pago = forma_pago
    WHERE id_Pago = id_Pago;

    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DeletePago(IN id_Pago INT)
BEGIN
    START TRANSACTION;

    IF id_Pago IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El ID del Pago no puede ser nulo';
    END IF;

    DELETE FROM pago WHERE id_Pago = id_Pago;

    COMMIT;
END;
//
DELIMITER ;

-- Empresa Alquiler
DELIMITER //
CREATE PROCEDURE insertEmpresaAlquiler(IN RUC VARCHAR(10), IN nombre VARCHAR(50))
BEGIN
	START TRANSACTION;
    IF RUC = '' OR nombre = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    INSERT INTO EmpresaAlquiler(RUC, nombre)
    VALUES (RUC, nombre);
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateEmpresaAlquiler(IN RUC VARCHAR(10), IN nombre VARCHAR(50))
BEGIN
	START TRANSACTION;
    IF RUC = '' OR nombre = '' THEN
		SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    
    UPDATE EmpresaAlquiler
    SET nombre = nombre
    WHERE RUC = RUC;
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteEmpresaAlquiler(IN RUC VARCHAR(10))
BEGIN 
	START TRANSACTION;
	IF RUC IS NULL THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El RUC de la empresa no puede ser NULL';
	END IF;
    DELETE FROM EmpresaAlquiler
    WHERE RUC = RUC;
    COMMIT;
END;
//
DELIMITER ;

-- Vehiculo
DELIMITER //
CREATE PROCEDURE insertVehiculo(IN no_Matricula VARCHAR(7), IN RUC VARCHAR(10), IN marca VARCHAR(20), IN disponibilidad TINYINT, IN precio_alquiler FLOAT, IN capacidad INT, IN imageURLVe VARCHAR(300))
BEGIN
	START TRANSACTION;
    IF no_Matricula = '' OR RUC = '' OR marca = '' OR precio_alquiler IS NULL OR capacidad IS NULL THEN
		SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    INSERT INTO Vehiculo(no_Matricula, RUC, marca, disponibilidad, precio_alquiler, capacidad, imageURLVe);
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateVehiculo(IN no_Matricula VARCHAR(7), IN RUC VARCHAR(10), IN marca VARCHAR(20), IN disponibilidad TINYINT, IN precio_alquiler FLOAT, IN capacidad INT, IN imageURLVe VARCHAR(300))
BEGIN
	START TRANSACTION;
    IF no_Matricula = '' OR RUC = '' OR marca = '' OR precioAlquiler IS NULL THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    
    UPDATE Vehiculo
    SET RUC = RUC, marca = marca, disponibilidad = disponibilidad, precio_alquiler = precio_alquiler, capacidad = capacidad, imageURLVe = imageURLVe
    WHERE no_Matricula = no_Matricula;
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteVehiculo(IN no_Matricula VARCHAR(7))
BEGIN
	START TRANSACTION;
    IF no_Matricula IS NULL THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La matricula del vehiculo no puede ser NULL';
	END IF;
    
    DELETE FROM Vehiculo 
    WHERE
    no_Matricula = no_Matricula;
    COMMIT;
END;
//
DELIMITER ;

-- Reserva
DELIMITER //
CREATE PROCEDURE insertReserva(IN id_Cliente INT, IN id_Inspector INT, IN no_Matricula VARCHAR(7), IN fecha_inicio DATE, IN hora_reserva TIME, IN ubicacion_recogida VARCHAR(50))
BEGIN
	START TRANSACTION;
    IF id_Cliente IS NULL OR id_Inspector IS NULL OR no_Matricula IS NULL OR hora_reserva IS NULL OR ubicacion_recogida = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    INSERT INTO Reserva(id_Cliente, id_Inspector, nod_Matricula, fecha_inicio, hora_reserva, ubicacion_recogida)
    VALUES (id_Cliente, id_Inspector, no_Matricula, fecha_inicio, hora_reserva, ubicacion_recogida);
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE updateReserva(IN id_Reserva INT, IN id_Inspector INT, IN no_Matricula VARCHAR(7), IN fecha_inicio DATE, IN hora_reserva TIME, IN ubicacion_recogida VARCHAR(50))
BEGIN
	START TRANSACTION;
    IF id_Reserva IS NULL OR id_Cliente IS NULL OR id_Inspector IS NULL OR no_Matricula = '' OR fecha_inicio IS NULL OR hora_reserva IS NULL OR ubicacion_recogida = '' THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Todos los campos deben estar completos';
	END IF;
    
    UPDATE Reserva;
    SET id_Cliente = id_Cliente, id_Inspector = id_Inspector, no_Matricula = no_Matricula, fecha_inicio = fecha_inicio, hora_reserva = hora_reserva, ubicacion_recogida = ubicacion_recogida
    WHERE id_Reserva = id_Reserva;
    COMMIT;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteReserva(IN id_Reserva INT)
BEGIN
	START TRANSACTION;
    IF id_Reserva IS NULL THEN
		SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'El ID de la Reserva no puede ser NULL';
	END IF;
    DELETE FROM Reserva 
    WHERE id_Reserva = id_Reserva;
    COMMIT;
END;
//
DELIMITER ;
-- Recargo

-- Devoluciones
